apiVersion: apps/v1
kind: StatefulSet
metadata:
  namespace: monitoring
  name: k8s-prometheus
  labels:
    app.kubernetes.io/name: prometheus
    app.kubernetes.io/instance: k8s-prometheus
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: prometheus
      app.kubernetes.io/instance: k8s-prometheus
  serviceName: k8s-prometheus-headless
  replicas: 1
  updateStrategy:
    type: RollingUpdate
  template:
    metadata:
      labels:
        app.kubernetes.io/name: prometheus
        app.kubernetes.io/instance: k8s-prometheus
    spec:
      serviceAccount: k8s-prometheus
      initContainers:
      - name: initializer
        image: busybox:1.26.2
        command:
        - /bin/sh
        - -c
        - |
          mkdir -p /data/prometheus && chmod 777 /data/prometheus
        securityContext:
          runAsUser: 0
        volumeMounts:
        - name: data
          mountPath: /data/prometheus
      containers:
      - name: prometheus
        image: quay.io/prometheus/prometheus:v2.11.1
        args:
        - --config.file=/etc/prometheus/prometheus.yaml
        - --storage.tsdb.path=/data/prometheus
        - --storage.tsdb.retention=30d
        - --web.enable-lifecycle
        - --storage.tsdb.no-lockfile
        - --web.route-prefix=/
        ports:
        - containerPort: 9090
          name: web
        livenessProbe:
          failureThreshold: 6
          httpGet:
            path: /-/healthy
            port: web
            scheme: HTTP
          periodSeconds: 5
          successThreshold: 1
          timeoutSeconds: 3
        readinessProbe:
          failureThreshold: 120
          httpGet:
            path: /-/ready
            port: web
            scheme: HTTP
          periodSeconds: 5
          successThreshold: 1
          timeoutSeconds: 3
        resources:
          requests:
            memory: 400Mi
        volumeMounts:
        - name: data
          mountPath: /data/prometheus
        - name: config
          mountPath: /etc/prometheus
      volumes:
      - name: config
        configMap:
          name: k8s-prometheus
          items:
          - key: prometheus-config
            path: prometheus.yaml
  volumeClaimTemplates:
  - metadata:
      name: data
    spec:
      # Specify a storage class name if there is no default storage class in k8s,
      # or you do not want to use default storage class
      # storageClassName: standard
      accessModes:
      - ReadWriteOnce
      resources:
        requests:
          storage: 20Gi
---
apiVersion: v1
kind: Service
metadata:
  namespace: monitoring
  name: k8s-prometheus-headless
  labels:
    app.kubernetes.io/name: prometheus
    app.kubernetes.io/instance: k8s-prometheus
spec:
  clusterIP: None
  ports:
  - port: 9090
    targetPort: 9090
    protocol: TCP
  selector:
    app.kubernetes.io/name: prometheus
    app.kubernetes.io/instance: k8s-prometheus
---
apiVersion: v1
kind: Service
metadata:
  namespace: monitoring
  name: k8s-prometheus
  labels:
    app.kubernetes.io/name: prometheus
    app.kubernetes.io/instance: k8s-prometheus
spec:
  ports:
  - port: 9090
    targetPort: 9090
    protocol: TCP
  selector:
    app.kubernetes.io/name: prometheus
    app.kubernetes.io/instance: k8s-prometheus
---
apiVersion: v1
kind: ConfigMap
metadata:
  namespace: monitoring
  name: k8s-prometheus
  labels:
    app.kubernetes.io/name: prometheus
    app.kubernetes.io/instance: k8s-prometheus
data:
  prometheus-config: |
    global:
      scrape_interval: 15s
      evaluation_interval: 15s

    scrape_configs:
    - job_name: kubelet-0
      kubernetes_sd_configs:
      - role: node
      scheme: https
      tls_config:
        ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
      bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
      relabel_configs:
      - action: labelmap
        regex: __meta_kubernetes_node_label_(.+)
      - target_label: __address__
        replacement: kubernetes.default.svc:443
      - source_labels: [__meta_kubernetes_node_name]
        regex: (.+)
        target_label: __metrics_path__
        replacement: /api/v1/nodes/${1}/proxy/metrics/cadvisor
      - target_label: job
        replacement: kubelet

    - job_name: kubelet-1
      kubernetes_sd_configs:
      - role: node
      scheme: https
      bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
      tls_config:
        ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
      relabel_configs:
      - target_label: job
        replacement: kubelet
      - target_label: __address__
        replacement: kubernetes.default.svc:443
      - source_labels: [__meta_kubernetes_service_name]
        separator: ;
        regex: (.*)
        target_label: service
        replacement: $1
        action: replace
      - source_labels: [__meta_kubernetes_node_name]
        regex: (.+)
        target_label: __metrics_path__
        replacement: /api/v1/nodes/${1}/proxy/metrics

    - job_name: node-exporter
      kubernetes_sd_configs:
      - role: pod
      relabel_configs:
      - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_scrape]
        action: keep
        regex: true
      - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_path]
        action: replace
        target_label: __metrics_path__
        regex: (.+)
      - source_labels: [__address__, __meta_kubernetes_pod_annotation_prometheus_io_port]
        action: replace
        regex: ([^:]+)(?::\d+)?;(\d+)
        replacement: $1:$2
        target_label: __address__
      - source_labels: [__meta_kubernetes_pod_label_app]
        regex: node-exporter
        action: keep
      - source_labels: [__meta_kubernetes_pod_node_name]
        target_label: kubernetes_node

    - job_name: pod
      kubernetes_sd_configs:
      - role: pod
      relabel_configs:
      - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_scrape]
        action: keep
        regex: true
      - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_path]
        action: replace
        target_label: __metrics_path__
        regex: (.+)
      - source_labels: [__address__, __meta_kubernetes_pod_annotation_prometheus_io_port]
        action: replace
        regex: ([^:]+)(?::\d+)?;(\d+)
        replacement: $1:$2
        target_label: __address__
      - source_labels: [__meta_kubernetes_pod_label_app_kubernetes_io_name]
        regex: kube-state-metrics
        action: drop            # ignore kube-state-metrics, this is scraped by endpoints role
      - source_labels: [__meta_kubernetes_pod_label_app]
        regex: node-exporter
        action: drop            # ignore node-exporter, this is scraped by node-exporter job
      - action: labelmap
        regex: __meta_kubernetes_pod_label_(.+)
      - source_labels: [__meta_kubernetes_namespace]
        action: replace
        target_label: kubernetes_namespace
      - source_labels: [__meta_kubernetes_pod_name]
        action: replace
        target_label: kubernetes_pod_name
      - source_labels: [__meta_kubernetes_pod_node_name]
        action: replace
        target_label: kubernetes_node
      - source_labels: [__meta_kubernetes_pod_ip]
        action: replace
        target_label: kubernetes_pod_ip
      - source_labels: [__meta_kubernetes_pod_name]
        action: replace
        target_label: instance

    - job_name: kubernetes-apiservers
      kubernetes_sd_configs:
      - role: endpoints
      scheme: https
      tls_config:
        ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
      bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
      relabel_configs:
      - source_labels: [__meta_kubernetes_namespace, __meta_kubernetes_service_name, __meta_kubernetes_endpoint_port_name]
        action: keep
        regex: default;kubernetes;https

    - job_name: kubernetes-service-endpoints
      kubernetes_sd_configs:
      - role: endpoints
      relabel_configs:
      - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_scrape]
        action: keep
        regex: true
      - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_path]
        action: replace
        target_label: __metrics_path__
        regex: (.+)
      - source_labels: [__address__, __meta_kubernetes_pod_annotation_prometheus_io_port]
        action: replace
        regex: ([^:]+)(?::\d+)?;(\d+)
        replacement: $1:$2
        target_label: __address__
      - action: labelmap
        regex: __meta_kubernetes_service_label_(.+)
      - source_labels: [__meta_kubernetes_namespace]
        action: replace
        target_label: kubernetes_namespace
      - source_labels: [__meta_kubernetes_service_name]
        action: replace
        target_label: kubernetes_name
---
apiVersion: v1
kind: ServiceAccount
metadata:
  namespace: monitoring
  name: k8s-prometheus
  labels:
    app.kubernetes.io/name: prometheus
    app.kubernetes.io/instance: k8s-prometheus
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: k8s-prometheus
  labels:
    app.kubernetes.io/name: prometheus
    app.kubernetes.io/instance: k8s-prometheus
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: k8s-prometheus
subjects:
- kind: ServiceAccount
  name: k8s-prometheus
  namespace: monitoring
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: k8s-prometheus
  labels:
    app.kubernetes.io/name: prometheus
    app.kubernetes.io/instance: k8s-prometheus
rules:
- apiGroups: [""]
  resources: ["nodes", "nodes/proxy", "services", "endpoints", "pods"]
  verbs: ["get", "list", "watch"]
- nonResourceURLs: ["/metrics"]
  verbs: ["get"]
